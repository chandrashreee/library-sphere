// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  MEMBER
  EMPLOYEE
  ADMIN
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  code      String   @unique
  firstName String
  lastName  String
  email     String   @unique
  password  String
  phone     String
  address   Address?
  role      UserRole @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  loans        Loan[]
  reservations Reservation[]
}

type Address {
  number   String
  street   String
  city     String
  province String
}

enum DocumentCategory {
  NOVEL
  COMICS
  GAMES
  EDUCATIONAL
  REFERENCE
  OTHER
}

enum DocumentClassifying {
  KIDS
  TEENS
  ADULTS
}

enum DocumentType {
  COMEDY
  DRAMA
  HORROR
  SCIFI
  FANTASY
  ROMANCE
  THRILLER
  BIOGRAPHY
  NONFICTION
  OTHER
}

model Document {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  code         String             @unique
  title        String
  author       String
  year         Int
  category     DocumentCategory
  classifying  DocumentClassifying
  type         DocumentType
  description  String
  ISBN         String?
  imagePath    String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  loans        Loan[]
  reservations Reservation[]
}

model Loan {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  user               User      @relation(fields: [userId], references: [id])
  userId             String    @db.ObjectId
  document           Document  @relation(fields: [documentId], references: [id])
  documentId         String    @db.ObjectId
  loanDate           DateTime  @default(now())
  expectedReturnDate DateTime
  actualReturnDate   DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@unique([userId, documentId, loanDate])
}

model Reservation {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @db.ObjectId
  document       Document @relation(fields: [documentId], references: [id])
  documentId     String   @db.ObjectId
  reservationDate DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, documentId])
}
